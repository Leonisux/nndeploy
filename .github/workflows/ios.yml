# GitHub Actions 工作流配置文件 - iOS平台编译
# 该文件用于配置在iOS环境下自动编译项目的CI/CD流程

name: iOS  # 工作流名称，会显示在GitHub Actions界面中

# 触发条件配置
on:
  # 当代码推送到指定分支时触发
  push:
    branches:
      - main  # 仅当推送到main分支时触发
      - develop  # 仅当推送到develop分支时触发
      - 'feature/**'
    paths:  # 仅当以下路径的文件发生变化时才触发构建
      - 'framework/**'     # 框架核心代码目录
      - 'plugin/**'        # 插件扩展代码目录
      - 'python/src/**'    # Python绑定代码目录(pybind11相关)
      - 'test/**'          # 单元测试和集成测试代码目录
      - 'demo/**'          # 示例和演示代码目录
      - 'cmake/**'         # CMake构建配置文件目录
      - 'CMakeLists.txt'   # 项目主要的CMake构建配置文件
      - '.github/workflows/ios.yml'  # 当前工作流文件自身
  # 当创建Pull Request到指定分支时触发
  pull_request:
    branches: [main]  # 仅当PR目标分支为main时触发
    paths:  # 与push相同的路径过滤条件
      - 'framework/**'     # 框架核心代码目录
      - 'plugin/**'        # 插件扩展代码目录
      - 'python/src/**'    # Python绑定代码目录
      - 'test/**'          # 测试代码目录
      - 'demo/**'          # 示例代码目录
      - 'cmake/**'         # CMake配置文件目录
      - 'CMakeLists.txt'   # 主CMake构建文件
      - '.github/workflows/ios.yml'  # 当前工作流文件

# 工作任务定义
jobs:
  build:  # 任务ID
    name: iOS编译构建  # 任务显示名称
    runs-on: macos-latest  # 指定运行环境为最新版macOS(iOS需要在macOS上交叉编译)
  
    strategy:  # 构建策略矩阵，支持多种iOS架构
      matrix:
        ios_arch: [arm64, x86_64]  # iOS支持的CPU架构 (arm64用于真机, x86_64用于模拟器)
  
    steps:  # 构建步骤序列
      # 第一步：检出源代码
      - name: 检出代码
        uses: actions/checkout@v4  # 使用GitHub官方提供的代码检出Action(v4版本)
        with:
          submodules: recursive  # 递归检出所有子模块(git submodule)
          
      # 第二步：设置Xcode环境
      - name: 设置Xcode环境
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable  # 使用最新稳定版Xcode
          
      # 第三步：安装系统依赖包
      - name: 安装依赖
        run: |
          brew update  # 更新Homebrew包管理器
          brew install \  # 安装必要的开发工具和库
            cmake \               # CMake构建系统
            ninja \               # Ninja构建工具(比make更快)
            pkg-config            # 包配置工具
            
      # 第四步：配置iOS交叉编译环境
      - name: 配置iOS构建
        run: |
          # 设置iOS SDK路径
          export IOS_SDK_PATH=$(xcrun --sdk iphoneos --show-sdk-path)
          export IOS_SIMULATOR_SDK_PATH=$(xcrun --sdk iphonesimulator --show-sdk-path)
          
          # 根据架构选择相应的SDK和目标
          if [ "${{ matrix.ios_arch }}" = "arm64" ]; then
            export CMAKE_IOS_SDK="iphoneos"
            export CMAKE_IOS_DEPLOYMENT_TARGET="11.0"
          else
            export CMAKE_IOS_SDK="iphonesimulator"
            export CMAKE_IOS_DEPLOYMENT_TARGET="11.0"
          fi
          
          mkdir build-${{ matrix.ios_arch }}  # 为每个架构创建单独的构建目录
          cp cmake/config.cmake build-${{ matrix.ios_arch }}  # 复制项目特定的CMake配置文件
          cd build-${{ matrix.ios_arch }}  # 进入构建目录
          
          # 配置CMake进行iOS交叉编译
          cmake -G Ninja \
            -DCMAKE_SYSTEM_NAME=iOS \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.ios_arch }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 \
            -DCMAKE_IOS_INSTALL_COMBINED=YES \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_NNDEPLOY_PYTHON=OFF \
            ..
          
      # 第五步：执行编译
      - name: 编译
        run: |
          cd build-${{ matrix.ios_arch }}  # 进入对应架构的构建目录
          ninja -j$(sysctl -n hw.ncpu)     # 使用所有CPU核心并行编译
          
      # 第六步：验证编译结果
      - name: 编译结果检查
        run: |
          cd build-${{ matrix.ios_arch }}  # 进入构建目录
          ls -la                          # 列出所有生成的文件和目录
          echo "iOS ${{ matrix.ios_arch }} 架构编译完成"  # 输出完成信息
          
      # 第七步：上传编译产物
      # 修复: 将actions/upload-artifact从v3升级到v4解决弃用警告
      - name: 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: ios-${{ matrix.ios_arch }}-libs
          path: build-${{ matrix.ios_arch }}/lib/