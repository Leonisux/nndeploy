# GitHub Actions 工作流配置文件 - Android平台编译
# 该文件用于配置在Android环境下自动编译项目的CI/CD流程

name: Android  # 工作流名称，会显示在GitHub Actions界面中

# 触发条件配置
on:
  # 当代码推送到指定分支时触发
  push:
    branches:
      - main  # 仅当推送到main分支时触发
      - develop  # 仅当推送到develop分支时触发
      - 'feature/**'
    paths:  # 仅当以下路径的文件发生变化时才触发构建
      - 'framework/**'     # 框架核心代码目录
      - 'plugin/**'        # 插件扩展代码目录
      - 'python/src/**'    # Python绑定代码目录(pybind11相关)
      - 'test/**'          # 单元测试和集成测试代码目录
      - 'demo/**'          # 示例和演示代码目录
      - 'cmake/**'         # CMake构建配置文件目录
      - 'CMakeLists.txt'   # 项目主要的CMake构建配置文件
      - '.github/workflows/android.yml'  # 当前工作流文件自身
  # 当创建Pull Request到指定分支时触发
  pull_request:
    branches: [main]  # 仅当PR目标分支为main时触发
    paths:  # 与push相同的路径过滤条件
      - 'framework/**'     # 框架核心代码目录
      - 'plugin/**'        # 插件扩展代码目录
      - 'python/src/**'    # Python绑定代码目录
      - 'test/**'          # 测试代码目录
      - 'demo/**'          # 示例代码目录
      - 'cmake/**'         # CMake配置文件目录
      - 'CMakeLists.txt'   # 主CMake构建文件
      - '.github/workflows/android.yml'  # 当前工作流文件

# 环境变量定义
env:
  ANDROID_API_LEVEL: 21  # 最低Android API级别
  ANDROID_NDK_VERSION: r25c  # NDK版本
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  CCACHE_DIR: ${{ github.workspace }}/.ccache  # ccache缓存目录

# 工作任务定义
jobs:
  build:  # 任务ID
    name: Android编译构建  # 任务显示名称
    runs-on: ubuntu-latest  # 指定运行环境为Ubuntu Linux(用于Android交叉编译)
  
    strategy:  # 构建策略矩阵，支持多种Android架构
      matrix:
        android_abi: [armeabi-v7a, arm64-v8a]  # Android支持的主要CPU架构（移除x86以提高效率）
        api_level: [21, 24, 28]  # 支持多个Android API级别
        build_type: [Release]  # 支持调试和发布版本
  
    steps:  # 构建步骤序列
      # 第一步：检出源代码
      - name: 检出代码
        uses: actions/checkout@v4  # 使用GitHub官方提供的代码检出Action(v4版本)
        with:
          submodules: recursive  # 递归检出所有子模块(git submodule)
          
      # 第二步：设置JDK环境
      - name: 设置JDK环境
        uses: actions/setup-java@v4  # 升级到v4版本
        with:
          distribution: 'temurin'  # 使用Eclipse Temurin JDK发行版
          java-version: '17'       # 升级到Java 17版本（Android推荐）
          
      # 第三步：缓存设置
      - name: 设置构建缓存
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.CCACHE_DIR }}
            ${{ env.VCPKG_ROOT }}/downloads
            ${{ env.VCPKG_ROOT }}/installed
          key: android-${{ matrix.android_abi }}-${{ matrix.api_level }}-${{ hashFiles('**/CMakeLists.txt', 'cmake/**/*.cmake') }}
          restore-keys: |
            android-${{ matrix.android_abi }}-${{ matrix.api_level }}-
            android-${{ matrix.android_abi }}-
            android-
          
      # 第四步：安装Android NDK和工具
      - name: 安装Android开发工具
        run: |
          sudo apt-get update  # 更新包管理器索引
          sudo apt-get install -y build-essential cmake ninja-build unzip wget ccache libopencv-dev protobuf-compiler libprotobuf-dev
            
          # 设置ccache
          ccache --max-size=2G
          ccache --zero-stats
            
      # 第五步：设置Android NDK
      - name: 设置Android NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.ANDROID_NDK_VERSION }}
          
      # 第六步：安装vcpkg依赖管理器
      - name: 安装vcpkg依赖管理器
        run: |
          if [ ! -d "${{ env.VCPKG_ROOT }}" ]; then
            git clone https://github.com/Microsoft/vcpkg.git ${{ env.VCPKG_ROOT }}
            cd ${{ env.VCPKG_ROOT }}
            ./bootstrap-vcpkg.sh
          fi
          
      # 第七步：安装Android平台依赖库
      - name: 安装Android依赖库
        run: |
          cd ${{ env.VCPKG_ROOT }}
          # 设置Android triplet
          export VCPKG_DEFAULT_TRIPLET=${{ matrix.android_abi }}-android
          
          # 为Android架构安装依赖库（仅安装必要的库以节省时间）
          ./vcpkg install \
            rapidjson:${{ matrix.android_abi }}-android \
            protobuf:${{ matrix.android_abi }}-android
          
          # OpenCV由于编译时间较长，可选安装
          # ./vcpkg install opencv4:${{ matrix.android_abi }}-android
          
      # 第八步：配置CMake构建环境
      - name: 配置构建
        run: |
          # 创建构建目录(out-of-source构建)
          mkdir build                    # 创建构建目录(out-of-source构建)
          cp cmake/config.cmake build   # 复制项目特定的CMake配置文件
          cd build                       # 进入构建目录
          cmake -G Ninja \              # 使用Ninja生成器
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \  # Android工具链
            -DANDROID_ABI=${{ matrix.android_abi }} \  # 指定Android ABI架构
            -DANDROID_PLATFORM=android-21 \           # 指定最低Android API级别
            -DCMAKE_BUILD_TYPE=Release \               # 发布版本构建
            -DVCPKG_TARGET_TRIPLET=${{ matrix.android_abi }}-android \  # vcpkg目标三元组
            -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake \  # vcpkg工具链
            ..                            # 源代码目录
          
      # 第八步：执行编译
      - name: 编译
        run: |
          cd build                    # 进入构建目录
          ninja -j$(nproc)           # 使用所有CPU核心并行编译
          
      # 第九步：验证编译结果
      - name: 编译结果检查
        run: |
          cd build              # 进入构建目录
          ls -la               # 列出所有生成的文件和目录
          echo "Android ${{ matrix.android_abi }} 架构编译完成"  # 输出完成信息
          
      # 第十步：上传编译产物
      # 注意：升级到v4版本以解决GitHub Actions的弃用警告
      # GitHub在2024年4月16日宣布弃用v3版本的artifact actions
      - name: 上传编译产物
        uses: actions/upload-artifact@v4  # 从v3升级到v4版本
        with:
          name: android-${{ matrix.android_abi }}-build  # 产物名称
          path: build/  # 上传整个构建目录
          retention-days: 7  # 保留7天
