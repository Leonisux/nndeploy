# .readthedocs.yaml
# Read the Docs configuration file
# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details

# Required
version: 2

# Set the OS, Python version and other tools you might need
build:
  os: ubuntu-22.04
  tools:
    python: "3.11"
    # You can also specify other tool versions:
    # nodejs: "19"
    # rust: "1.64"
    # golang: "1.19"
  apt_packages:
    - doxygen
    - graphviz
    - build-essential
    - cmake
    - ninja-build
    - pkg-config
    - libopencv-dev
    - protobuf-compiler
    - libprotobuf-dev
  jobs:
    post_checkout:
      # 确保所有子模块被正确初始化和更新
      - git submodule update --init --recursive
    post_install:
      # 在安装依赖包后立即验证cmake是否可用
      - which cmake
      - cmake --version
    pre_build:
      # 验证当前目录并确认CMakeLists.txt存在
      - pwd
      - ls -la
      - echo "检查CMakeLists.txt是否存在："
      - test -f CMakeLists.txt && echo "CMakeLists.txt 存在" || echo "CMakeLists.txt 不存在"
      # 如果在子目录中，需要返回到正确的项目根目录
      - |
        if [ ! -f CMakeLists.txt ]; then
          echo "当前目录没有CMakeLists.txt，尝试查找项目根目录..."
          # 查找包含CMakeLists.txt的父目录
          ORIGINAL_DIR=$(pwd)
          while [ ! -f CMakeLists.txt ] && [ "$(pwd)" != "/" ]; do
            cd ..
            echo "检查目录: $(pwd)"
          done
          if [ -f CMakeLists.txt ]; then
            echo "找到项目根目录: $(pwd)"
          else
            echo "错误：无法找到包含CMakeLists.txt的目录"
            cd "$ORIGINAL_DIR"
            exit 1
          fi
        fi
      # 再次确认我们在正确的目录
      - pwd
      - ls -la CMakeLists.txt
      # 创建构建目录并复制配置文件
      - mkdir -p build
      - |
        if [ -f cmake/config.cmake ]; then
          cp cmake/config.cmake build/
        else
          echo "警告：cmake/config.cmake 不存在，使用默认配置"
        fi
      # 配置和编译nndeploy
      - cd build
      - echo "开始CMake配置..."
      - cmake -DCMAKE_BUILD_TYPE=Release ..
      - echo "开始编译..."
      - make -j$(nproc)
      - make install
      # 安装nndeploy Python包(开发者模式)
      - cd ../python 
      - pip install -e .

# Build documentation in the "docs/" directory with Sphinx
sphinx:
   configuration: docs/zh_cn/conf.py

# Optionally build your docs in additional formats such as PDF and ePub
# formats:
#    - pdf
#    - epub

# Optional but recommended, declare the Python requirements required
# to build your documentation
# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html
python:
   install:
   - requirements: docs/requirements-docs.txt